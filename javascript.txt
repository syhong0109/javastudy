// console.log("Hello JavaScript")


/*
  자바스크립트 튜토리얼

  1 데이터 타입
  2 기본 메서드
  3 연산자
  4 조건문
  5 반복문
  6 변수
  7 함수
  8 배열
  9 객체
  10 클래스
  11 에러
  12 비동기 작업
  13 JSON
*/


/*
  데이터 타입

  1 문자열
  2 Number
  3 Boolean
  4 Null
  5 Undefined
  6 BigInt
*/


// 1 String(문자열) - 문자의 집합을 나타낸다

// var foo = "bar"

// console.log(foo) // bar
// console.log(typeof foo) // string

// // 문자열에서 각각의 문자에 접근하기
// console.log(foo[0]) // b
// console.log(foo[1]) // a
// console.log(foo[2]) // r

// // 문자열에서 문자의 갯수 파악하기
// console.log(foo.length) // 3


/*
  Number

  1 값의 종류: 정수, 분수, NaN(Not a Number), +Infinity, -Infinity
*/

// 정수
// var year = 2023;

// console.log(year); // 2023
// console.log(typeof year) // number


// 분수
// var pi = 3.14
// console.log(pi) // 3.14


// NaN
// var nan = 2 - "foo"

// console.log(nan) // NaN


// 넘버 타입이 저장할 수 있는 가장 큰수
// var max_value = Number.MAX_VALUE

// console.log(max_value)

// 넘버 타입이 저장할 수 있는 가장 작은 수
// var negative_max_value = -Number.MAX_VALUE;

// console.log(negative_max_value);


// +Infinity (양의 무한대)

// var infinity = Number.MAX_VALUE * 1.1

// console.log(infinity); // Infinity


// -Infinity (음의 무한대)

// var negative_infinity = -Number.MAX_VALUE * 1.1

// console.log(negative_infinity) // -Infinity


/*
  Boolean

  참 또는 거짓 (true of false)의 값을 갖는다
*/

// var bool = true;

// console.log(bool); // true
// console.log(typeof bool) // boolean

// // 비교연산
// console.log(1 > 0) // true


/*
  Null
  '없음'을 나타내는 데이터 타입
*/

// var foo = null

// console.log(foo) // null
// console.log(typeof foo) // object


/*
  Undefined
  정의되지 않은 변수가 가지는 데이터 타입
*/

// var foo;

// console.log(foo) // undefined
// console.log(typeof foo) // undefined (문자열)


/*
  BigInt (Big Integer, 큰 정수)

  안전한 정수 밖의 정수를 정확하게 표현할 때 사용하는 데이터 타입

  * 안전한 정수의 범위: -(2^53 - 1) 에서 2^53 -1 사이의 정수
*/

// var max_safe_integer = Number.MAX_SAFE_INTEGER

// console.log(max_safe_integer) // 안전한 정수의 최대값

// var min_safe_integer = Number.MIN_SAFE_INTEGER

// console.log(min_safe_integer) // 안전한 정수의 최소값

// var not_safe_integer = 9999999999999999 // 9가 16개

// console.log(not_safe_integer) // 10000000000000000

// 정수값에 n을 붙여 BigInt 타입을 선언한다
// var bigint = 9999999999999999n // 9가 16개

// console.log(bigint) // 9999999999999999n


/*
  기본 메서드
  데이터에 특정한 작업을 수행한다

  1 String 메서드
  2 Number 메서드
*/


/*
  String 메서드

  1 toUpperCase
  2 indexOf
  3 trim
  4 substring
*/


// var foo = "bar"

// // 문자열의 모든 문자를 대문자로 변환한다
// console.log(foo.toUpperCase()) // BAR


// indexOf(인덱스를 구할 문자열)
// var foo = "bar"

// console.log(foo.indexOf("r")) // 2
// console.log(foo.indexOf("k")) // -1 (문자가 없을 경우)


// trim
// var foo = "  bar  ";

// // 문자열 앞/뒤의 공백을 제거한다
// console.log(foo.trim()); // bar


// substring(시작인덱스, 끝인덱스)

// var foo = "abcde"

// // 인덱스값의 범위에 해당하는 문자열을 추출한다
// console.log(foo.substring(2, 4)) // cd


/*
  Number 메서드

  1 toPrecision
  2 isString
*/

// var pi = Math.PI;

// console.log(pi) // 3.141592653589793

// // 정밀도를 증가시키는 메서드 toPrecision(표현할 숫자의 갯수)
// var precisePi = pi.toPrecision(50)

// console.log(precisePi)


// toString

// var n = 2023

// console.log(n.toString()) // 2023(문자열 타입)
// console.log(typeof n.toString()) // string


/*
  연산자

  1 수리연산자
  2 할당연산자
  3 비교연산자
  4 논리연산자
  5 타입연산자
*/

/* 
  수리연산자

  1 사칙연산
  + - * /
  2 증가연산자
  ++
  3 감소연산자
  --
  4 제곱연산자
  **
  5 계수연산자
  %
*/

// 4칙연산자
// var add = 1 + 1
// var subtract = 2 - 1
// var divide = 1 / 2
// var multiply = 1 * 2

// console.log("더하기:", add);
// // > 2
// console.log("빼기:", subtract);
// // > 1
// console.log("나누기:", divide);
// // > 0.5
// console.log("곱하기:", multiply)
// // > 2


// 증가/감소 연산자

// var i = 1;
// i++ // 1을 증가시킨다
// console.log(i); // 2


// 제곱연산자
// var exp = 2 ** 7
// console.log(exp) // 128


// 계수연산자
// var mod = 5 % 2
// console.log(mod) // 1


/*
  할당 연산자

  1 변수 할당 연산자
  =
  2 더하기 할당 연산자
  +=
  3 빼기 할당 연산자
  -=
  4 곱하기 할당 연산자
  *=
  5 나누기 할당 연산자
  /=
  6 제곱 할당 연산자
  **=
  7 계수 할당 연산자
  %=
*/

// 변수 할당 연산자
// var foo = "bar"

// console.log(foo)


// 더하기 할당 연산자
// var n = 1
// n += 1 // n = n + 1 와 같다

// console.log(n) // 2


/*
  비교 연산자

  1 동등 연산자
  ==
  2 비동등 연산자
  !=
  3 엄격 동등 연산자
  ===
  4 엄격 비동등 연산자
  !==
  5 크다
  >
  6 크거나 같다
  >=
  7 작다
  <
  8 작거나 같다
  <=
*/


// 동등 연산
// console.log(1 == 2) // false
// console.log("foo" == "bar") // false
// console.log(2023 == "2023") // true?
// console.log(null == undefined) // true?

// 엄격 동등 연산
// console.log(1 === 2) // false
// console.log("foo" === "bar") // false
// console.log(2023 === "2023") // false
// console.log(null === undefined) // false


// 비동등 연산
// console.log(1 != 2) // true
// console.log("foo" != "bar"); // true
// console.log(2023 != "2023") // false
// console.log(null != undefined) // false

// // 엄격 비동등 연산
// console.log(1 !== 2) // true
// console.log("foo" !== "bar") // true
// console.log(2023 !== "2023") // true
// console.log(null !== undefined) // true


/*
  논리 연산자

  1 && (AND)
  표현식1 && 표현식 2
  표현식이 모두 참일 경우 true를 리턴한다

  2 || (OR) 
  표현식1 || 표현식2
  표현식 중 하나가 참이면 true를 리턴한다

  3 ! (NOT)
  !표현식
  표현식의 반대값을 리턴한다
*/

// AND
// console.log(1 > 0 && 1 < 2) // true

// OR
// console.log(1 > 0 || 1 > 2) // true

// NOT
// console.log(!(1 > 0)) // false

// Boolean 타입이 아닌 값을 부정할 경우

// console.log(!null) // true 
// console.log(!undefined) // true
// console.log(!0) // true
// console.log(!2023) // false
// console.log(!"") // true
// console.log(!"foo") // false


/*
  타입 연산자
  변수의 타입을 리턴한다
*/

// var foo = "bar"
// console.log(typeof foo) // string


/*
  조건문

  1 if 조건문
  2 switch 조건문
  3 ? (삼항연산자) 조건문
*/


/*
  if 조건문

  1 if
  2 if/else
  3 if/else if/else
*/

// if 조건문
// var year = 2023

// if (year === 2023) {
//   console.log("이번 년도")
// }


// if / else

// var year = 2023

// if (year === 2023) {
//   console.log("이번 년도")
// } else {
//   console.log("올해가 아닙니다")
// }


// if / else if / else

// var year = 2023

// if (year === 2022) {
//   console.log("작년")/
// } else if (year === 2023) {
//   console.log("올해")
// } else if (year === 2024) {
//   console.log("내년")
// } else {
//   console.log("가까운 년도가 아닙니다")
// }


/*
  switch 조건문
  엄격동등연산을 수행한다
*/

// var year = 2023

// switch (year) {
//   case 2022:
//     console.log("작년")
//     break;
  
//   case 2023:
//     console.log("올해")
//     break;

//   case 2024:
//     console.log("내년")
//     break;

//   default:
//     console.log("가까운 년도가 아닙니다")
// }


/*
  삼항연산자 (?)

  조건 ? 값1 : 값2

  조건이 참일 경우 값1을 리턴한다
  조건이 거짓일 경우 값 2를 리턴한다
*/

// var year = 2023;

// var r = year === 2023 ? '올 해' : '올해가 아닙니다'

// console.log(r); // 올해



/*
  Q. 나이가 성인이면 "성인입니다" 그렇지 않으면
  "성인이 아닙니다"를 출력하는 조건문을 만들어보세요

  1 if/else 조건문 이용
  2 삼항연산자 이용
*/


// var age = 20

// // if/else 조건문
// if (age >= 18) {
//   console.log("성인입니다")
// } else {
//   console.log("성인이 아닙니다")
// }

// // 삼항연산자
// var r = age >= 18 ? "성인입니다" : "성인이 아닙니다"

// console.log(r)


/*
  반복문

  1 for 반복문
  2 while 반복문
*/


// for 반복문

// for(변수초기값; 반복조건; 변수값 증가) { 실행할 코드 }
// for (var i=1; i<=10; i++) {
//   console.log(i + "번 실행되었습니다")
// }


// 1부터 10까지의 합을 구하시오

// var sum = 0;

// for (var i=1; i<=10; i++) {
//   sum += i; // sum = sum + i
// }

// console.log(sum); // 55


// while 반복문

// var i = 1 // 변수초기값

// while (i <= 10) { // while (반복 조건)
//   console.log(i + "번 실행되었습니다")

//   i++; // 변수값 증가
// }


// Q. for 반복문을 사용해서 1, 1/2, 1/3, ... 1/10 까지의 합을 구해보세요

// var sum = 0

// for (var i=1; i<=10; i++) {
//   sum += (1 / i)
// }

// console.log(sum)


/*
  변수

  1 기본 사용 방법
  2 전역 변수와 지역 변수
*/


// 기본 사용
// var foo = "bar" // 변수 초기화

// console.log(foo) // bar


// var foo = "bar" // 변수 초기화

// foo = "baz" // 변수 재정의

// console.log(foo) // baz


// var foo; // 변수 선언

// foo = "bar" // 변수 정의

// console.log(foo) // bar


/*
  전역 변수와 지역변수
*/

// 전역변수 (global variables)

// var varInGlobal = true; // 소스코드에서 어디에서든지 접근가능하다

// console.log(varInGlobal) // true


// 지역 변수 (local variables)

// function f() {
//   // 함수 내에서 선언된 변수, 해당함수 내에서만 접근가능하다
//   var varInFunction = true;

//   console.log(varInFunction);
// }

// console.log(varInFunction) // error

// f();


/*
  함수
  호출할 때만 실행되는 코드

  1 함수 선언 방법
  2 Hoisting
  3 매개변수와 인자
  4 return
  5 콜백
*/


// 함수 선언방법

// function f() { // 함수 선언
//   console.log("foo")
// }

// f() // 함수 호출


// Hoisting (게양)
// 함수 선언이 게양된다

// f()

// function f() {
//   console.log("foo")
// }


/*
  매개변수와 인자 (Parameter and Argument)
*/

// function add(x, y) { // 매개변수: 인자를 치환한 문자, x와y
//   console.log("결과:", x + y)
// }

// add(1, 2) // 인자: 실제 함수에 전달되는 값



/*
  return

  함수는 결과값을 리턴할 수 있다
*/

// function add(x, y) {
//   return x + y;
// }

// var r = add(1, 2)

// console.log("결과:", r); // 결과: 3



/*
  콜백 (callback)
  함수 인자
*/

// function f(callback) {
//   var r = callback()

//   console.log(r)
// }

// function cb() {
//   return "foo"
// }

// f(cb); // cb는 콜백이다


// 콜백의 사용예시
// function getTime() {
//   // 현재시간
//   var time = new Date().toLocaleTimeString();

//   console.log(time)
// }

// // setInterval(callback, ms): ms마다 callback을 실행한다
// // 1000ms = 1s

// setInterval(getTime, 1000);


/*
  나이를 입력받아
  성인이면 "성인입니다" 그렇지 않으면 "성인이 아닙니다"를 출력하는
  함수를 만들어보세요
*/

// function isAdult(age) { // age: 매개변수

//   // 인자가 숫자가 아닌 경우
//   if (typeof age !== "number") {
//     console.log("인자는 숫자만 가능합니다");
//     return; // 함수의 실행을 중단한다
//   }

//   if (age >= 18) {
//     console.log("성인입니다")
//   } else {
//     console.log("성인이 아닙니다")
//   }
// }

// isAdult(20) // 호출 성인입니다
// isAdult(15) // 성인이 아닙니다
// isAdult(18) // 성인입니다

// isAdult("나 몇살이게"); // 성인이 아닙니다?
// isAdult(20) // 성인입니다


/*
  배열 (Array)
  한개 이상의 값을 가지는 데이터 타입

  1 배열에 접근하기
  2 배열 메서드
  3 배열 순회
*/


// 1 배열에 접근하기

// var arr = ["foo", "bar", "baz"]

// console.log(arr[0]) // foo
// console.log(arr[1]) // bar
// console.log(arr[2]) // baz

// console.log(arr.length) // 3 (배열 아이템의 갯수)


/*
  배열 메서드
  배열에 특정한 작업을 수행한다

  1 push
  2 pop
  3 concat
  4 sort
*/

// push(새아이템1, 새아이템2, ...)

// var arr = ["foo", "bar"];

// arr.push("baz") // 배열의 마지막에 새 아이템을 추가한다

// console.log(arr) // foo, bar, baz


// pop

// var arr = ["foo", "bar", "baz"]

// arr.pop(); // 배열의 마지막 아이템을 제거한다

// console.log(arr) // foo, bar


// Array1.concat(Array2, Array3, ...)

// var arr1 = ["foo", "bar"]
// var arr2 = ["baz", "duck"]

// var r = arr1.concat(arr2) // 배열을 연결(concatenation)한다

// console.log(r) // foo bar baz duck


// sort()

// var arr = ["foo", "bar", "baz"];

// arr.sort() // 문자열 배열일 경우 알파벳순, 숫자일 경우 오름차순으로 정렬한다

// console.log(arr) // bar baz foo


/*
  배열 순회하기
  배열에 특정한 작업을 수행한다
*/

// var arr = ["foo", "bar", "baz"];

// // 문자열 배열의 각 문자열을 대문자로 변환한다
// for (var i=0; i<arr.length; i++) {
//   console.log(arr[i].toUpperCase()) // i변수를 인덱스로 활용한다
// }

// // FOO 
// // BAR 
// // BAZ


// var arr = ["foo", "bar", "baz"]

// // 필터 작업
// for (var i=0; i<arr.length; i++) {
//   if (arr[i][0] === "b") { // b로 시작하는 아이템일 경우
//     console.log(arr[i])
//   }
// }

// bar
// baz


// 맥주 리스트에 미국 맥주를 추가해보세요

// var beers = ["기네스", "하이네켄"]

// var americanBeer = "버드와이저";

// beers.push(americanBeer);

// console.log(beers); // 기네스, 하에네켄, 버드와이저


// 성인의 나이만 콘솔에 출력해보세요
// 배열 순회 문제

// var ages = [12, 19, 23, 30]

// for (var i=0; i<ages.length; i++) {
//   if (ages[i] >= 18) { // 필터링 작업
//     console.log(ages[i]) // 19, 23, 30
//   }
// }


/*
  객체 (Object)

  함수와 데이터의 집합
*/



// console.log(cat); // cat객체에 접근

// 속성에 접근하기
// console.log(cat.name) // 치즈

// console.log(cat["name"]) // 치즈

// console.log(cat.home) // 길고양이

// console.log(cat.color) // undefined (존재하지 않는 속성에 접근)

// console.log(cat.sound()) // 메서드 호출

// var cat = {
//   // 속성(properties)
//   name: "치즈",
//   home: null,
//   sound: function () { // 메서드(method)
//     return "야옹"
//   }
// }

// 속성 추가
// cat.age = 2;
// console.log(cat)

// 속성 수정
// cat.home = "삼산동" // 입양됨
// console.log(cat)


// 속성 삭제
// delete cat.home;
// console.log(cat) // 집 비공개



// var irishBeer = {
//   name: "기네스",
//   origin: "아일랜드",
//   available: false // 품절
// }

// // 기네스가 재입고되었습니다 객체의 속성을 업데이트해보세요

// irishBeer.available = true;

// console.log(irishBeer)


// var beers = [
//   { name: "Guinness", origin: "Ireland" },
//   { name: "Heineken", origin: "Netherlands" },
//   { name: "Budwiser", origin: "USA" },
// ]

// // 배열 순회를 통해서 맥주의 이름을 대문자로 출력해보세요

// for (var i=0; i<beers.length; i++) {
//   console.log(beers[i].name.toUpperCase())
//   // GUINNESS, HEINEKEN, BUDWISER
// }


/*
  클래스 
  객체 생성을 위한 틀

  1 클래스와 인스턴스
  2 생성자
  3 상속
  4 static 속성과 메서드
  5 내장 클래스
  6 리터럴 표기법
*/


/*
  클래스와 인스턴스

  인스턴스: 클래스로부터 생성된 객체
*/

// class Beer { // 클래스의 이름은 대문자로 시작해야한다
//   // 클래스의 멤버
//   name;
//   origin;
//   available;
// }

// var irishBeer = new Beer(); // 인스턴스 생성

// // 인스턴스 속성 설정
// irishBeer.name = "기네스"
// irishBeer.origin = "아일랜드"
// irishBeer.available = false;

// console.log(irishBeer); 
// console.log(irishBeer instanceof Beer); // true

// var dutchBeer = new Beer();

// dutchBeer.name = "하이네켄"
// dutchBeer.origin = "네덜란드"
// dutchBeer.available = true;

// console.log(dutchBeer);
// console.log(dutchBeer instanceof Beer) // true


/*
  생성자(contructor)

  인스턴스의 속성 설정을 처리한다
*/


// class Beer {
//   // 옵션
//   constructor(name, origin, available) {
//     // this: 인스턴스
//     this.name = name;
//     this.origin = origin;
//     this.available = available;
//   }

//   name;
//   origin;
//   available;
// }

// // 간편하게 속성을 설정할 수 있다
// var irishBeer = new Beer("기네스", "아일랜드", false);

// console.log(irishBeer);


/*
  상속

  인스턴스는 클래스의 속성과 메서드를 상속받는다
*/

// class Beer {

//   // ...

//   // 클래스에 속한 함수 - 메서드
//   drink() {
//     return "시원하다!"
//   }
// }

// var beer = new Beer();

// // Beer 클래스의 모든 인스턴스는 drink 메서드에 접근할 수 있다
// console.log(beer.drink()) // 시원하다 lol



/*
  static 속성과 메서드

  클래스와 관련된 유용한 기능을 제공한다
*/

// class Beer {

//   // ...

//   // 속성
//   static history = "기원전 3000년"

//   // 메서드
//   static recipe() {
//     return "밀, 홉, 효모 그리고 물"
//   }
// }

// // 클래스 자체가 호출한다
// console.log(Beer.history)
// console.log(Beer.recipe())


// class Beer {
//   constructor (name, origin, available) {
//     this.name = name;
//     this.origin = origin;
//     this.available = available;
//   }

//   name;
//   origin;
//   available;

//   drink() {
//     return "시원하다 lol"
//   }

//   static history = "기원전 3000년"

//   static recipe() {
//     return "밀, 홉, 효모 그리고 물"
//   }
// }



/*
  자바스크립트에 내장된 클래스

  1 문자 처리: String
  2 숫자와 날짜: Number, Math, Date
  3 인덱스가 있는 컬렉션: Array
  4 에러: SyntaxError, ReferenceError, 등
  5 기타: Object, Promise, JSON
*/


// var pi = Math.PI // 내장된 클래스의 static 속성 사용 예시
// console.log(pi)


/*
  리터럴 표기법
  
  값만 작성한다
*/

// String의 인스턴스
// var foo = new String("bar"); // 클래스 호출
// var foo = "bar" // 리터럴 표기법

// Number의 인스턴스
// var year = new Number(2023); // 클래스 호출
// var year = 2023; // 리터럴 표기

// 리터럴 표기를 할수없는 클래스
// var date = new Date();
// console.log(date)


// FAQ

// { key: value } 객체

// console.log("foo".toUpperCase())


/*
  다음 조건을 만족하는 클래스를 선언하고 인스턴스를 생성해보세요

  1 클래스 이름: Car

  2 클래스의 멤버
  name, brand, color

  3 속성 설정을 위한 생성자를 가지고 있다

  4 static 메서드 - getAge
  구매일을 입력하면 차의 연식을 알려준다
*/


// class Car {
//   constructor(name, brand, color) {
//     this.name = name;
//     this.brand = brand;
//     this.color = color;
//   }

//   name;
//   brand;
//   color;

//   static getAge(purchasedAt) {
//     var date = new Date();

//     return "차의 연식: " + (date.getFullYear() - purchasedAt)
//   }
// }

// var car = new Car("GV80", "제네시스", "블랙");

// console.log(car);
// console.log(Car.getAge(2020))


/*
  에러와 에러처리

  1 에러 개념
  2 에러 처리
  3 에러의 종류
  4 예외(Exception)
*/


/*
  에러 개념

  에러는 프로그램을 중단시킨다
*/


// console.log(foo);
// app crashed (실행 중단)


/*
  에러 처리

  try / catch 구문
*/

// try { // 코드 작성

//   // ..

//   console.log(foo)

// } catch (error) { // 에러 처리
//   console.log(error)
// }


/*
  에러의 종류

  1 SyntaxError
  2 ReferenceError
  3 TypeError
  4 RangeError
  5 URIError
*/


/*
  ReferenceError

  존재하지 않는 변수를 참조할 때 발생
*/

// try {
//   console.log(foo) 
//   // ReferenceError: foo is not defined

// } catch (error) {
//   console.log(error)
// }

/*
  SyntaxError

  문법 에러
  컴파일 에러를 발생시킨다
*/

// try {
//   console.log(2023))
//   // SyntaxError: unexpected token ')'

//   // try /catch 구문으로 처리할 수 없다
// } catch (error) {
//   console.error(error)
// }


/*
  TypeError

  변수나 매개변수가 유효한 타입이 아닐 때
*/


// try {

//   // setInterval(callback, ms)
//   setInterval(null, 1000)

//   // TypeError: The "callback" argument must be of type function
//   // Received null

// } catch (error) {
//   console.error(error);
// }



/*
  RangeError

  값이 지정된 범위를 벗어났을 때
*/

// try {

//   var pi = Math.PI;

//   console.log(pi.toPrecision(200))
//   // RangeError: toPrecision() argument must be between 1 and 100

// } catch (error) {
//   console.error(error)
// }


/*
  URIError

  encodeURI()와 decodeURI() 메서드에 잘못된 인자를 전달했을 경우
*/

// try {
//   console.log(decodeURI('%'))
//   // URI malformed (URI가 잘못생성되었다)
// } catch (error) {
//   console.error(error)
// }


/*
  예외 (Exception)

  필요할 경우 에러를 발생시킨다
*/

// try {
//   var age = 15;

//   console.log("학생:", "아저씨 기네스 한병 주세요")

//   if (age < 18) {
//     // 에러를 던진다
//     throw "미성년자는 술을 살 수 없습니다"
//   }

//   // 아래 코드는 실행되지 않는다
//   console.log("CU직원:", "네 여기있습니다")

// } catch (error) {
//   console.error(error);
// }


/*
  비동기 작업 
  앱에서 블로킹(blocking)을 방지하기 위해 사용된다
  예) 서버에서 데이터 가져오기 등

  1 동기작업 (Synchronous operation)
  1 비동기작업 (Asynchronous operation)
*/


/*
  동기 작업

  코드가 순서대로 실행된다
*/

// function f() {
//   console.log("작업 1")
// }

// // 대부분의 작업은 동기 작업이다
// f()
// console.log("작업 2")


/*
  비동기 작업

  빠른 작업부터 실행된다
*/


// 예: 서버에서 데이터 가져오기

// 서버에 데이터를 요청하는 함수
// function fetchData(callback) {
//   // 데이터를 가져오는데 1초가 걸린다고 가정
//   setTimeout(function () {
//     callback(null, "duck")
//   }, 1000);
// }

// fetchData(function (err, data) {
//   if (err) {
//     throw err;
//   }

//   console.log("서버에서 가져온 데이터:", data);
// })

// // 다음 작업부터 실행된다
// console.log("다음 작업")


/*
  JSON (JavaScript Object Notation)
  자바스크립트 객체를 저장하거나 전송하기 위한 텍스트 포맷

  1 객체와 JSON
  2 JSON.stringify
  3 JSON.parse
*/


/* 객체와 JSON */

// var o = { foo: "bar" }; // 객체

// var json = '{ "foo": "bar" }'; // JSON

// console.log(o)
// console.log(json)

// console.log(typeof json) // string

/*
  JSON.stringify

  객체를 JSON으로 변환한다
*/

// var o = { foo: "bar" };
// var json = JSON.stringify(o);

// console.log(json); // JSON


/* 
  JSON.parse

  JSON을 객체로 변환한다
*/

// var json = '{ "foo": "bar" }';

// var o = JSON.parse(json);

// console.log(o); // 객체